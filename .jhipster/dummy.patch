diff --git a/src/main/java/tech/jhipster/beer/dummy/application/DummyApplicationService.java b/src/main/java/tech/jhipster/beer/dummy/application/DummyApplicationService.java
new file mode 100644
index 0000000..8721e12
--- /dev/null
+++ b/src/main/java/tech/jhipster/beer/dummy/application/DummyApplicationService.java
@@ -0,0 +1,28 @@
+package tech.jhipster.beer.dummy.application;
+
+import java.util.List;
+import org.springframework.stereotype.Service;
+import tech.jhipster.beer.dummy.domain.Dummy;
+import tech.jhipster.beer.dummy.domain.DummyRepository;
+
+@Service
+public class DummyApplicationService {
+
+  private final DummyRepository dummyRepository;
+
+  public DummyApplicationService(DummyRepository dummyRepository) {
+    this.dummyRepository = dummyRepository;
+  }
+
+  public List<Dummy> list() {
+    return dummyRepository.list();
+  }
+
+  public void add(Dummy dummy) {
+    dummyRepository.add(dummy);
+  }
+
+  public void clear() {
+    dummyRepository.clear();
+  }
+}
diff --git a/src/main/java/tech/jhipster/beer/dummy/domain/Dummy.java b/src/main/java/tech/jhipster/beer/dummy/domain/Dummy.java
new file mode 100644
index 0000000..72331a7
--- /dev/null
+++ b/src/main/java/tech/jhipster/beer/dummy/domain/Dummy.java
@@ -0,0 +1,13 @@
+package tech.jhipster.beer.dummy.domain;
+
+import tech.jhipster.beer.error.domain.Assert;
+
+public record Dummy(String name) {
+  public Dummy {
+    Assert.notBlank("name", name);
+  }
+
+  public static Dummy of(String name) {
+    return new Dummy(name);
+  }
+}
diff --git a/src/main/java/tech/jhipster/beer/dummy/domain/DummyRepository.java b/src/main/java/tech/jhipster/beer/dummy/domain/DummyRepository.java
new file mode 100644
index 0000000..da2f2d8
--- /dev/null
+++ b/src/main/java/tech/jhipster/beer/dummy/domain/DummyRepository.java
@@ -0,0 +1,9 @@
+package tech.jhipster.beer.dummy.domain;
+
+import java.util.List;
+
+public interface DummyRepository {
+  List<Dummy> list();
+  void add(Dummy dummy);
+  void clear();
+}
diff --git a/src/main/java/tech/jhipster/beer/dummy/infrastructure/primary/rest/DummyResource.java b/src/main/java/tech/jhipster/beer/dummy/infrastructure/primary/rest/DummyResource.java
new file mode 100644
index 0000000..f0cebd2
--- /dev/null
+++ b/src/main/java/tech/jhipster/beer/dummy/infrastructure/primary/rest/DummyResource.java
@@ -0,0 +1,32 @@
+package tech.jhipster.beer.dummy.infrastructure.primary.rest;
+
+import java.util.List;
+import org.springframework.web.bind.annotation.*;
+import tech.jhipster.beer.dummy.application.DummyApplicationService;
+import tech.jhipster.beer.dummy.domain.Dummy;
+
+@RestController
+@RequestMapping("/api/dummy")
+class DummyResource {
+
+  private final DummyApplicationService dummyApplicationService;
+
+  public DummyResource(DummyApplicationService dummyApplicationService) {
+    this.dummyApplicationService = dummyApplicationService;
+  }
+
+  @GetMapping
+  public List<Dummy> list() {
+    return dummyApplicationService.list();
+  }
+
+  @PostMapping
+  public void create(@RequestBody Dummy dummy) {
+    dummyApplicationService.add(dummy);
+  }
+
+  @DeleteMapping
+  public void clear() {
+    dummyApplicationService.clear();
+  }
+}
diff --git a/src/main/java/tech/jhipster/beer/dummy/infrastructure/secondary/DummyInMemoryRepository.java b/src/main/java/tech/jhipster/beer/dummy/infrastructure/secondary/DummyInMemoryRepository.java
new file mode 100644
index 0000000..7bba309
--- /dev/null
+++ b/src/main/java/tech/jhipster/beer/dummy/infrastructure/secondary/DummyInMemoryRepository.java
@@ -0,0 +1,29 @@
+package tech.jhipster.beer.dummy.infrastructure.secondary;
+
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import org.springframework.stereotype.Repository;
+import tech.jhipster.beer.dummy.domain.Dummy;
+import tech.jhipster.beer.dummy.domain.DummyRepository;
+
+@Repository
+public class DummyInMemoryRepository implements DummyRepository {
+
+  private Map<String, Dummy> dummys = new ConcurrentHashMap<>();
+
+  @Override
+  public List<Dummy> list() {
+    return dummys.values().stream().toList();
+  }
+
+  @Override
+  public void add(Dummy dummy) {
+    dummys.put(dummy.name(), dummy);
+  }
+
+  @Override
+  public void clear() {
+    dummys = new ConcurrentHashMap<>();
+  }
+}
diff --git a/src/test/java/tech/jhipster/beer/dummy/application/DummyApplicationServiceIT.java b/src/test/java/tech/jhipster/beer/dummy/application/DummyApplicationServiceIT.java
new file mode 100644
index 0000000..b03efaf
--- /dev/null
+++ b/src/test/java/tech/jhipster/beer/dummy/application/DummyApplicationServiceIT.java
@@ -0,0 +1,39 @@
+package tech.jhipster.beer.dummy.application;
+
+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;
+
+import java.util.List;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import tech.jhipster.beer.IntegrationTest;
+import tech.jhipster.beer.dummy.domain.Dummy;
+
+@IntegrationTest
+class DummyApplicationServiceIT {
+
+  @Autowired
+  DummyApplicationService service;
+
+  @BeforeEach
+  void setUp() {
+    service.clear();
+  }
+
+  @Test
+  void shouldList() {
+    List<Dummy> result = service.list();
+
+    assertThat(result).isEmpty();
+  }
+
+  @Test
+  void shouldAddAndList() {
+    Dummy dummy = Dummy.of("beer");
+
+    service.add(dummy);
+
+    List<Dummy> result = service.list();
+    assertThat(result).contains(dummy);
+  }
+}
diff --git a/src/test/java/tech/jhipster/beer/dummy/domain/DummyTest.java b/src/test/java/tech/jhipster/beer/dummy/domain/DummyTest.java
new file mode 100644
index 0000000..50c93f0
--- /dev/null
+++ b/src/test/java/tech/jhipster/beer/dummy/domain/DummyTest.java
@@ -0,0 +1,35 @@
+package tech.jhipster.beer.dummy.domain;
+
+import static org.assertj.core.api.Assertions.*;
+
+import org.junit.jupiter.api.Test;
+import tech.jhipster.beer.UnitTest;
+import tech.jhipster.beer.error.domain.MissingMandatoryValueException;
+
+@UnitTest
+class DummyTest {
+
+  @Test
+  void shouldBuild() {
+    Dummy dummy = new Dummy("chips");
+
+    assertThat(dummy.name()).isEqualTo("chips");
+  }
+
+  @Test
+  void shouldOf() {
+    Dummy dummy = Dummy.of("chips");
+
+    assertThat(dummy.name()).isEqualTo("chips");
+  }
+
+  @Test
+  void shouldNotBuildWithNullName() {
+    assertThatThrownBy(() -> new Dummy(null)).isExactlyInstanceOf(MissingMandatoryValueException.class).hasMessageContaining("name");
+  }
+
+  @Test
+  void shouldNotBuildWithBlankName() {
+    assertThatThrownBy(() -> new Dummy(" ")).isExactlyInstanceOf(MissingMandatoryValueException.class).hasMessageContaining("name");
+  }
+}
diff --git a/src/test/java/tech/jhipster/beer/dummy/infrastructure/primary/rest/DummyResourceIT.java b/src/test/java/tech/jhipster/beer/dummy/infrastructure/primary/rest/DummyResourceIT.java
new file mode 100644
index 0000000..c0b3612
--- /dev/null
+++ b/src/test/java/tech/jhipster/beer/dummy/infrastructure/primary/rest/DummyResourceIT.java
@@ -0,0 +1,64 @@
+package tech.jhipster.beer.dummy.infrastructure.primary.rest;
+
+import static org.assertj.core.api.Assertions.*;
+import static org.hamcrest.Matchers.hasItem;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
+
+import java.util.List;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
+import org.springframework.http.MediaType;
+import org.springframework.test.web.servlet.MockMvc;
+import tech.jhipster.beer.IntegrationTest;
+import tech.jhipster.beer.TestUtil;
+import tech.jhipster.beer.dummy.application.DummyApplicationService;
+import tech.jhipster.beer.dummy.domain.Dummy;
+
+@IntegrationTest
+@AutoConfigureMockMvc
+class DummyResourceIT {
+
+  @Autowired
+  DummyApplicationService dummyApplicationService;
+
+  @Autowired
+  MockMvc mockMvc;
+
+  @BeforeEach
+  void setUp() {
+    dummyApplicationService.clear();
+  }
+
+  @Test
+  void shouldList() throws Exception {
+    dummyApplicationService.add(Dummy.of("beer"));
+
+    mockMvc
+      .perform(get("/api/dummy"))
+      .andExpect(status().isOk())
+      .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
+      .andExpect(jsonPath("$.[*].name").value(hasItem("beer")));
+  }
+
+  @Test
+  void shouldCreate() throws Exception {
+    mockMvc
+      .perform(post("/api/dummy").contentType(MediaType.APPLICATION_JSON).content(TestUtil.convertObjectToJsonBytes(Dummy.of("beer"))))
+      .andExpect(status().isOk());
+
+    List<Dummy> result = dummyApplicationService.list();
+    assertThat(result).isNotEmpty();
+    assertThat(result.get(0).name()).isEqualTo("beer");
+  }
+
+  @Test
+  void shouldClear() throws Exception {
+    mockMvc.perform(delete("/api/dummy")).andExpect(status().isOk());
+
+    List<Dummy> result = dummyApplicationService.list();
+    assertThat(result).isEmpty();
+  }
+}
diff --git a/src/test/java/tech/jhipster/beer/dummy/infrastructure/secondary/DummyInMemoryRepositoryTest.java b/src/test/java/tech/jhipster/beer/dummy/infrastructure/secondary/DummyInMemoryRepositoryTest.java
new file mode 100644
index 0000000..fd7d1f9
--- /dev/null
+++ b/src/test/java/tech/jhipster/beer/dummy/infrastructure/secondary/DummyInMemoryRepositoryTest.java
@@ -0,0 +1,53 @@
+package tech.jhipster.beer.dummy.infrastructure.secondary;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.util.List;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.InjectMocks;
+import org.springframework.test.context.junit.jupiter.SpringExtension;
+import tech.jhipster.beer.UnitTest;
+import tech.jhipster.beer.dummy.domain.Dummy;
+
+@UnitTest
+@ExtendWith(SpringExtension.class)
+class DummyInMemoryRepositoryTest {
+
+  @InjectMocks
+  DummyInMemoryRepository repository;
+
+  @BeforeEach
+  void setUp() {
+    repository.clear();
+  }
+
+  @Test
+  void shouldList() {
+    List<Dummy> result = repository.list();
+
+    assertThat(result).isEmpty();
+  }
+
+  @Test
+  void shouldAddAndList() {
+    Dummy dummy = Dummy.of("beer");
+
+    repository.add(dummy);
+
+    List<Dummy> result = repository.list();
+    assertThat(result).contains(dummy);
+  }
+
+  @Test
+  void shouldAddOnceAndList() {
+    Dummy dummy = Dummy.of("beer");
+
+    repository.add(dummy);
+    repository.add(dummy);
+
+    List<Dummy> result = repository.list();
+    assertThat(result).hasSize(1).contains(dummy);
+  }
+}
